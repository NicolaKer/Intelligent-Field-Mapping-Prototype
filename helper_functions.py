from datetime import datetime
from dateutil import parser

"""
helper_functions.py

Please note: Docstring comments were generated by ChatGTP and modified slightly by the developer.

This module contains helper functions for processing Textract responses and extracting specific information
from the extracted text.

Functions:
- convert_date(text): Converts an ambiguous date format (e.g., 01/02/03 or 1st October 2021) to a standardized format (dd-mm-yyyy).
- get_IRD_num(responses, required_info): Extracts a nine-digit code from Textract response JSON objects
  and updates the required_info dictionary with the extracted IRD number.
- find_queries(responses): Extracts queries (via their aliases) and their corresponding results from Textract response JSON objects.
- filter_queries(queries): Filters and organizes the extracted queries and results. Duplicate queries with no resonse are removed.
- get_query_responses(responses, required_info): Processes Textract responses, extracts query answers, and updates the required_info dictionary
  with the extracted values.

Date: 19 Oktober 2023
"""

#This function was generated by Chat GTP on the 16 October 2023
def convert_date(text):
    """
    Converts an ambiguous date format (e.g., 01/02/03 or 1st October 2021) to a standardized format (dd-mm-yyyy).

    :param text: Input date string in ambiguous format.
    :return: Standardized date string (dd-mm-yyyy) or an empty string if the input is not a valid date.
    """

    try:
        
        # This method will extract ambigious dates eg. 01/02/03 as dd/mm/yy as this is 
        # the most commonly used format in NZ.
        parsed_date = parser.parse(text, dayfirst=True)

        # Format the parsed date as dd-mm-yyyy
        formatted_date = parsed_date.strftime('%d-%m-%Y')

        return formatted_date
    except ValueError:
        # Handle the case when the input string is not a valid date
        return ""

#This function was generated by Chat GPT 
def get_IRD_num(responses, required_info):
    """
    Extracts a nine-digit code from Textract response JSON objects and updates the required_info dictionary
    with the extracted IRD number.

    :param responses: Textract response JSON objects containing extracted text and information.
    :param required_info: Dictionary to store the extracted information.
    """
    for response in responses:
        for item in response['Blocks']:
            if item['BlockType'] == 'LINE':
                line = item['Text'].split()
                for word in line:
                    if len(word) == 9 and word.isdigit():
                        required_info['IRD_NUMBER'] = word

# This function was written with the help of this AWS Code example: https://docs.aws.amazon.com/textract/latest/dg/api-async-roles.html
# Date: 16 October 2023
def find_queries(responses):
    """
    Extracts queries (via their aliases) and their corresponding results from Textract response JSON objects.

    :param responses: Textract response JSON objects containing extracted text and information.
    :return: List of query-answer pairs extracted from the Textract response.
    """
    queries = []

    for response in responses:
        blocks = response['Blocks']
        for block in blocks:
            if block["BlockType"] == "QUERY":
                new_query = [block["Query"].get('Alias'), ""]
                queries.append(new_query)
        
            if block["BlockType"] == "QUERY_RESULT":
                queries[len(queries) - 1][1] =  block["Text"]

    return filter_queries(queries)

# generated by chat GTP on 17th of October 2023
def filter_queries(queries):
    """
    Filters and organizes the extracted queries and results. Duplicate queries with no resonse are removed.

    :param queries: List of query-answer pairs extracted from the Textract response.
    :return: Filtered and organized list of query-answer pairs.
    """
    filtered_dict = {}
    for item in queries:
        key = item[0]
        value = item[1]
        if key in filtered_dict:
            if value != '' and filtered_dict[key][1] == '':
                filtered_dict[key] = item
            elif value != '' and filtered_dict[key][1] != '':
                filtered_dict[key] = item
        else:
            filtered_dict[key] = item
    filtered_list = list(filtered_dict.values())
    return filtered_list


def get_query_responses(responses, required_info):
    """
    Processes Textract responses, extracts query answers, and updates the required_info dictionary
    with the extracted values.

    :param responses: Textract response JSON objects containing extracted text and query answers.
    :param required_info: Dictionary to store the extracted information.
    """
    query_answers = find_queries(responses)
    query_answers = filter_queries(query_answers)


    for x in query_answers:
        if x[0] == 'START_DATE':
            required_info[x[0]] = convert_date(x[1])
        else: 
            required_info[x[0]] = x[1]



    


