"""
Please note: Docstring comments were generated by ChatGTP and modified slightly by the developer.

Before running the application, ensure the following variables are set:
- AWS_ACCESS_KEY_ID: AWS access key ID for authentication.
- AWS_SECRET_ACCESS_KEY: AWS secret access key for authentication.
- AWS_BUCKET_NAME: Name of the AWS S3 bucket where PDF documents will be stored.
- REGION_NAME: AWS region where the S3 bucket and Textract service are located.
- ROLEARN: Amazon Resource Name (ARN) of the role used by Amazon Textract.

The application provides the following routes:

1. '/' (Root Route):
    - Renders the main web page with empty form fields.

2. '/upload_tax_form' (POST):
    - Handles the upload of the IR330 Tax Code Declaration form.
    - Extracts text from the uploaded PDF form using Amazon Textract.
    - Displays extracted information (first name, last name, IRD number) on the web page.

3. '/upload_employment_agreement' (POST):
    - Handles the upload of employment agreement PDF documents.
    - Extracts text from the uploaded PDF using Amazon Textract.
    - Displays extracted information (start date) on the web page.


Note: This application requires the helper_functions and Multipage modules for proper execution.

Date: 19 October 2023
"""

from flask import Flask, request, render_template, redirect, url_for
import boto3
from helper_functions import get_query_responses, get_IRD_num
from Multipage import DocumentProcessor, ProcessType


ROLEARN = ''
AWS_ACCESS_KEY_ID = ''
AWS_SECRET_ACCESS_KEY = ''
AWS_BUCKET_NAME = ''
REGION_NAME = ''


'''We used this YouTube tutorial's (https://www.youtube.com/watch?v=tyDhDLcC7rc) code  to help us understand the basics of a Flask application. This tutorial also helped us understand 
how to set up routes and how to upload files to the AWS S3 bucket before sending files to AWS Textract.'''


# Initialize Flask app
app = Flask(__name__)

# Initialize AWS S3 client
s3 = boto3.client('s3',
                  aws_access_key_id=AWS_ACCESS_KEY_ID,
                  aws_secret_access_key=AWS_SECRET_ACCESS_KEY, region_name = REGION_NAME)

#This dictionary will store the information that is required to be filled in on the website
required_info = {'FIRST_NAME': '', 'LAST_NAME': '', 'IRD_NUMBER': '', 'START_DATE': ''}

# Tax form queries for Textract analysis
tax_form_queries = {
        "Queries": [{
            "Text": "What is the person's first name?",
            "Alias": "FIRST_NAME",
            "Pages": ["*"]
        },
        {
            "Text": "What is the person's last name?",
            "Alias": "LAST_NAME",
            "Pages": ["*"]
        }]
    }

# Employment agreement queries for Textract analysis
employment_agreement_queries = {
        'Queries':[{
            'Text':'{}'.format("When does employment commence?"),
            "Alias": "START_DATE",
            "Pages": ["*"]
            }]
    }


@app.route('/')
def index():
    """
    Renders the main web page with empty form fields.

    :return: HTML content for the main web page.
    """
    return render_template('homepage.html', f_name= '', l_name = '', idr_num = '', start_date = '')


@app.route('/upload_tax_form', methods=['post'])
def upload_tax_form():
    """
    Handles the upload of the IR330 Tax Code Declaration form.
    Extracts text from the uploaded PDF using Amazon Textract.
    Displays extracted information (first name, last name, IRD number, start date) on the web page.

    We modified the code used in this YouTube tutorial https://www.youtube.com/watch?v=tyDhDLcC7rc with the help of ChatGTP to
    write this function up until the 's3.upload_fileobj' line.

    :return: HTML content with the extracted information displayed on the web page.
    """
    pdf = get_uploaded_file(request)

    if pdf == 'None':
        return 'No file selected'
    
    # Uploads PDF to S3 bucket
    s3.upload_fileobj(pdf, AWS_BUCKET_NAME, pdf.filename)

    # Sends the file to Textract for analysis
    response = send_file_to_textract(pdf.filename, tax_form_queries)

    get_query_responses(response, required_info)
    get_IRD_num(response, required_info)

    s3.delete_object(Bucket=AWS_BUCKET_NAME, Key=pdf.filename)

    return render_template('homepage.html', f_name=required_info['FIRST_NAME'], 
                           l_name=required_info['LAST_NAME'], ird_num=required_info['IRD_NUMBER'], start_date =required_info['START_DATE'])


@app.route('/upload_employment_agreement', methods=['post'])
def upload_employment_agreement():
    """
    Handles the upload of employment agreement PDF documents.
    Extracts text from the uploaded PDF using Amazon Textract.
    Displays extracted information (first name, last name, start date) on the web page.

    We modified the code used in this YouTube tutorial https://www.youtube.com/watch?v=tyDhDLcC7rc with the help of ChatGTP to
    write this function up until the 's3.upload_fileobj' line.

    :return: HTML content with extracted information displayed on the web page.
    """
    print(required_info)

    pdf = get_uploaded_file(request)

    if pdf == 'None':
        return 'No file selected'
    
    #uploads to bucket
    s3.upload_fileobj(pdf, AWS_BUCKET_NAME, pdf.filename)

    #sends the file to Textact
    response = send_file_to_textract(pdf.filename, employment_agreement_queries)

    get_query_responses(response, required_info)

    print(required_info)

    # Delete the uploaded file from the S3 bucket
    s3.delete_object(Bucket=AWS_BUCKET_NAME, Key=pdf.filename)

    return render_template('homepage.html', f_name=required_info['FIRST_NAME'], 
                           l_name=required_info['LAST_NAME'], ird_num=required_info['IRD_NUMBER'], start_date =required_info['START_DATE'])



def send_file_to_textract(filename, queries):
    """
    Sends the specified file to Amazon Textract for text extraction.

    This method was created by adapting the code in the main mehtod in this exmaple:
    https://docs.aws.amazon.com/textract/latest/dg/async-analyzing-with-sqs.html. - 14 October 2023

    :param filename: Name of the file to be processed.
    :param queries: Queries to be used for Textract analysis.
    :return: Textract response containing extracted text and query answers.
    """
    analyzer = DocumentProcessor(ROLEARN, AWS_BUCKET_NAME, filename, REGION_NAME, AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY)
    analyzer.CreateTopicandQueue()
    responses = analyzer.ProcessDocument(ProcessType.ANALYSIS, queries)
    analyzer.DeleteTopicandQueue()
    return responses


def get_uploaded_file(request):
    """
    Retrieves the uploaded PDF file from the request.

    Generated by ChatGTP 29 September 2023

    :param request: Flask request object containing the uploaded file.
    :return: Uploaded PDF file object or 'None' if no file is present.
    """
    if 'pdfFile' not in request.files:
        return 'None'

    pdf = request.files['pdfFile']
    if pdf.filename == '':
        return 'None'

    return pdf
    

if __name__ == '__main__':
    app.run(debug=True)






